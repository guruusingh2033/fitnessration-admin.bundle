{"version":3,"sources":["meteor://ðŸ’»app/packages/nerdmed_catiline/packages/nerdmed_catiline.js"],"names":[],"mappingsfile":"/packages/nerdmed_catiline.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/nerdmed:catiline/catiline.js                                                                       //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/*! catiline 2.9.3 2013-10-25*/                                                                                // 1\n/*!Â©2013 Calvin Metcalf @license MIT https://github.com/calvinmetcalf/catiline */                              // 2\nif (typeof document === 'undefined') {                                                                         // 3\n\tself._noTransferable=true;                                                                                    // 4\n\tself.onmessage=function(e){                                                                                   // 5\n\t\t/*jslint evil: true */                                                                                       // 6\n\t\teval(e.data);                                                                                                // 7\n\t};                                                                                                            // 8\n} else {                                                                                                       // 9\n(function(global){                                                                                             // 10\n\t'use strict';                                                                                                 // 11\n//overall structure based on when                                                                              // 12\n//https://github.com/cujojs/when/blob/master/when.js#L805-L852                                                 // 13\nvar nextTick;                                                                                                  // 14\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;                               // 15\n/*if (typeof setImmediate === 'function') {                                                                    // 16\n\tnextTick = setImmediate.bind(global,drainQueue);                                                              // 17\n}else */if(MutationObserver){                                                                                  // 18\n\t//based on RSVP                                                                                               // 19\n\t//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/async.js                                            // 20\n\tvar observer = new MutationObserver(drainQueue);                                                              // 21\n\tvar element = document.createElement('div');                                                                  // 22\n\tobserver.observe(element, { attributes: true });                                                              // 23\n                                                                                                               // 24\n\t// Chrome Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661                                          // 25\n\taddEventListener('unload', function () {                                                                      // 26\n\t\tobserver.disconnect();                                                                                       // 27\n\t\tobserver = null;                                                                                             // 28\n\t}, false);                                                                                                    // 29\n\tnextTick =   function () {                                                                                    // 30\n\t\telement.setAttribute('drainQueue', 'drainQueue');                                                            // 31\n\t};                                                                                                            // 32\n}else{                                                                                                         // 33\n\tvar codeWord = 'com.catiline.setImmediate' + Math.random();                                                   // 34\n\taddEventListener('message', function (event) {                                                                // 35\n\t\t// This will catch all incoming messages (even from other windows!), so we need to try reasonably hard to    // 36\n\t\t// avoid letting anyone else trick us into firing off. We test the origin is still this window, and that a   // 37\n\t\t// (randomly generated) unpredictable identifying prefix is present.                                         // 38\n\t\tif (event.source === window && event.data === codeWord) {                                                    // 39\n\t\t\tdrainQueue();                                                                                               // 40\n\t\t}                                                                                                            // 41\n\t}, false);                                                                                                    // 42\n\tnextTick =  function() {                                                                                      // 43\n\t\tpostMessage(codeWord, '*');                                                                                  // 44\n\t};                                                                                                            // 45\n}                                                                                                              // 46\nvar mainQueue = [];                                                                                            // 47\n                                                                                                               // 48\n/**                                                                                                            // 49\n * Enqueue a task. If the queue is not currently scheduled to be                                               // 50\n * drained, schedule it.                                                                                       // 51\n * @param {function} task                                                                                      // 52\n */                                                                                                            // 53\ncatiline.nextTick = function(task) {                                                                           // 54\n\tif (mainQueue.push(task) === 1) {                                                                             // 55\n\t\tnextTick();                                                                                                  // 56\n\t}                                                                                                             // 57\n};                                                                                                             // 58\n                                                                                                               // 59\n/**                                                                                                            // 60\n * Drain the handler queue entirely, being careful to allow the                                                // 61\n * queue to be extended while it is being processed, and to continue                                           // 62\n * processing until it is truly empty.                                                                         // 63\n */                                                                                                            // 64\nfunction drainQueue() {                                                                                        // 65\n\tvar i = 0;                                                                                                    // 66\n\tvar task;                                                                                                     // 67\n\tvar innerQueue = mainQueue;                                                                                   // 68\n\tmainQueue = [];                                                                                               // 69\n\t/*jslint boss: true */                                                                                        // 70\n\twhile (task = innerQueue[i++]) {                                                                              // 71\n\t\ttask();                                                                                                      // 72\n\t}                                                                                                             // 73\n                                                                                                               // 74\n}                                                                                                              // 75\n                                                                                                               // 76\nvar func = 'function';                                                                                         // 77\n// Creates a deferred: an object with a promise and corresponding resolve/reject methods                       // 78\nfunction Deferred() {                                                                                          // 79\n\t// The `handler` variable points to the function that will                                                    // 80\n\t// 1) handle a .then(onFulfilled, onRejected) call                                                            // 81\n\t// 2) handle a .resolve or .reject call (if not fulfilled)                                                    // 82\n\t// Before 2), `handler` holds a queue of callbacks.                                                           // 83\n\t// After 2), `handler` is a simple .then handler.                                                             // 84\n\t// We use only one function to save memory and complexity.                                                    // 85\n\tvar handler = function(onFulfilled, onRejected, value) {                                                      // 86\n\t\t// Case 1) handle a .then(onFulfilled, onRejected) call                                                      // 87\n\t\tif (onFulfilled !== handler) {                                                                               // 88\n\t\t\tvar createdDeffered = createDeferred();                                                                     // 89\n\t\t\thandler.queue.push({                                                                                        // 90\n\t\t\t\tdeferred: createdDeffered,                                                                                 // 91\n\t\t\t\tresolve: onFulfilled,                                                                                      // 92\n\t\t\t\treject: onRejected                                                                                         // 93\n\t\t\t});                                                                                                         // 94\n\t\t\treturn createdDeffered.promise;                                                                             // 95\n\t\t}                                                                                                            // 96\n                                                                                                               // 97\n\t\t// Case 2) handle a .resolve or .reject call                                                                 // 98\n\t\t// (`onFulfilled` acts as a sentinel)                                                                        // 99\n\t\t// The actual function signature is                                                                          // 100\n\t\t// .re[ject|solve](sentinel, success, value)                                                                 // 101\n\t\tvar action = onRejected ? 'resolve' : 'reject';                                                              // 102\n\t\tfor (var i = 0, l = handler.queue.length; i < l; i++) {                                                      // 103\n\t\t\tvar queue = handler.queue[i];                                                                               // 104\n\t\t\tvar deferred = queue.deferred;                                                                              // 105\n\t\t\tvar callback = queue[action];                                                                               // 106\n\t\t\tif (typeof callback !== func) {                                                                             // 107\n\t\t\t\tdeferred[action](value);                                                                                   // 108\n\t\t\t}                                                                                                           // 109\n\t\t\telse {                                                                                                      // 110\n\t\t\t\texecute(callback, value, deferred);                                                                        // 111\n\t\t\t}                                                                                                           // 112\n\t\t}                                                                                                            // 113\n\t\t// Replace this handler with a simple resolved or rejected handler                                           // 114\n\t\thandler = createHandler(promise, value, onRejected);                                                         // 115\n\t};                                                                                                            // 116\n                                                                                                               // 117\n\tfunction Promise() {                                                                                          // 118\n\t\tthis.then = function(onFulfilled, onRejected) {                                                              // 119\n\t\t\treturn handler(onFulfilled, onRejected);                                                                    // 120\n\t\t};                                                                                                           // 121\n\t}                                                                                                             // 122\n\tvar promise = new Promise();                                                                                  // 123\n\tthis.promise = promise;                                                                                       // 124\n\t// The queue of deferreds                                                                                     // 125\n\thandler.queue = [];                                                                                           // 126\n                                                                                                               // 127\n\tthis.resolve = function(value) {                                                                              // 128\n\t\tif (handler.queue) {                                                                                         // 129\n\t\t\thandler(handler, true, value);                                                                              // 130\n\t\t}                                                                                                            // 131\n\t};                                                                                                            // 132\n                                                                                                               // 133\n\tthis.fulfill = this.resolve;                                                                                  // 134\n                                                                                                               // 135\n\tthis.reject = function(reason) {                                                                              // 136\n\t\tif (handler.queue) {                                                                                         // 137\n\t\t\thandler(handler, false, reason);                                                                            // 138\n\t\t}                                                                                                            // 139\n\t};                                                                                                            // 140\n}                                                                                                              // 141\n                                                                                                               // 142\nfunction createDeferred() {                                                                                    // 143\n\treturn new Deferred();                                                                                        // 144\n}                                                                                                              // 145\n                                                                                                               // 146\n// Creates a fulfilled or rejected .then function                                                              // 147\nfunction createHandler(promise, value, success) {                                                              // 148\n\treturn function(onFulfilled, onRejected) {                                                                    // 149\n\t\tvar callback = success ? onFulfilled : onRejected;                                                           // 150\n\t\tif (typeof callback !== func) {                                                                              // 151\n\t\t\treturn promise;                                                                                             // 152\n\t\t}                                                                                                            // 153\n\t\tvar result = createDeferred();                                                                               // 154\n\t\texecute(callback, value, result);                                                                            // 155\n\t\treturn result.promise;                                                                                       // 156\n\t};                                                                                                            // 157\n}                                                                                                              // 158\n                                                                                                               // 159\n// Executes the callback with the specified value,                                                             // 160\n// resolving or rejecting the deferred                                                                         // 161\nfunction execute(callback, value, deferred) {                                                                  // 162\n\tcatiline.nextTick(function() {                                                                                // 163\n\t\ttry {                                                                                                        // 164\n\t\t\tvar result = callback(value);                                                                               // 165\n\t\t\tif (result && typeof result.then === func) {                                                                // 166\n\t\t\t\tresult.then(deferred.resolve, deferred.reject);                                                            // 167\n\t\t\t}                                                                                                           // 168\n\t\t\telse {                                                                                                      // 169\n\t\t\t\tdeferred.resolve(result);                                                                                  // 170\n\t\t\t}                                                                                                           // 171\n\t\t}                                                                                                            // 172\n\t\tcatch (error) {                                                                                              // 173\n\t\t\tdeferred.reject(error);                                                                                     // 174\n\t\t}                                                                                                            // 175\n\t});                                                                                                           // 176\n}                                                                                                              // 177\ncatiline.deferred = createDeferred;                                                                            // 178\n// Returns a resolved promise                                                                                  // 179\ncatiline.resolve = function(value) {                                                                           // 180\n\tvar promise = {};                                                                                             // 181\n\tpromise.then = createHandler(promise, value, true);                                                           // 182\n\treturn promise;                                                                                               // 183\n};                                                                                                             // 184\n// Returns a rejected promise                                                                                  // 185\ncatiline.reject = function(reason) {                                                                           // 186\n\tvar promise = {};                                                                                             // 187\n\tpromise.then = createHandler(promise, reason, false);                                                         // 188\n\treturn promise;                                                                                               // 189\n};                                                                                                             // 190\n// Returns a deferred                                                                                          // 191\n                                                                                                               // 192\ncatiline.all = function(array) {                                                                               // 193\n\tvar promise = createDeferred();                                                                               // 194\n\tvar len = array.length;                                                                                       // 195\n\tvar resolved = 0;                                                                                             // 196\n\tvar out = [];                                                                                                 // 197\n\tvar onSuccess = function(n) {                                                                                 // 198\n\t\treturn function(v) {                                                                                         // 199\n\t\t\tout[n] = v;                                                                                                 // 200\n\t\t\tresolved++;                                                                                                 // 201\n\t\t\tif (resolved === len) {                                                                                     // 202\n\t\t\t\tpromise.resolve(out);                                                                                      // 203\n\t\t\t}                                                                                                           // 204\n\t\t};                                                                                                           // 205\n\t};                                                                                                            // 206\n\tarray.forEach(function(v, i) {                                                                                // 207\n\t\tv.then(onSuccess(i), function(a) {                                                                           // 208\n\t\t\tpromise.reject(a);                                                                                          // 209\n\t\t});                                                                                                          // 210\n\t});                                                                                                           // 211\n\treturn promise.promise;                                                                                       // 212\n};                                                                                                             // 213\ncatiline._hasWorker = typeof Worker !== 'undefined'&&typeof fakeLegacy === 'undefined';                        // 214\ncatiline.URL = window.URL || window.webkitURL;                                                                 // 215\ncatiline._noTransferable=!catiline.URL;                                                                        // 216\n//regex out the importScript call and move it up to the top out of the function.                               // 217\nfunction regexImports(string){                                                                                 // 218\n\tvar rest=string;                                                                                              // 219\n\tvar match = true;                                                                                             // 220\n\tvar matches = {};                                                                                             // 221\n\tvar loopFunc = function(a,b){                                                                                 // 222\n\t\tif(b){                                                                                                       // 223\n\t\t\t'importScripts('+b.split(',').forEach(function(cc){                                                         // 224\n\t\t\t\tmatches[catiline.makeUrl(cc.match(/\\s*[\\'\\\"](\\S*)[\\'\\\"]\\s*/)[1])]=true; // trim whitespace, add to matches // 225\n\t\t\t})+');\\n';                                                                                                  // 226\n\t\t}                                                                                                            // 227\n\t};                                                                                                            // 228\n\twhile(match){                                                                                                 // 229\n\t\tmatch = rest.match(/(importScripts\\(.*?\\);?)/);                                                              // 230\n\t\trest = rest.replace(/(importScripts\\(\\s*(?:[\\'\\\"].*?[\\'\\\"])?\\s*\\);?)/,'\\n');                                 // 231\n\t\tif(match){                                                                                                   // 232\n\t\t\tmatch[0].replace(/importScripts\\(\\s*([\\'\\\"].*?[\\'\\\"])?\\s*\\);?/g,loopFunc);                                  // 233\n\t\t}                                                                                                            // 234\n\t}                                                                                                             // 235\n\tmatches = Object.keys(matches);                                                                               // 236\n\treturn [matches,rest];                                                                                        // 237\n}                                                                                                              // 238\n                                                                                                               // 239\nfunction moveImports(string,after){                                                                            // 240\n\tvar str = regexImports(string);                                                                               // 241\n\tvar matches = str[0];                                                                                         // 242\n\tvar rest = str[1];                                                                                            // 243\n\tif(matches.length>0){                                                                                         // 244\n\t\treturn 'importScripts(\\''+matches.join('\\',\\'')+after+rest;                                                  // 245\n\t}else{                                                                                                        // 246\n\t\treturn rest;                                                                                                 // 247\n\t}                                                                                                             // 248\n}                                                                                                              // 249\nfunction getPath(){                                                                                            // 250\n\tif(typeof SHIM_WORKER_PATH !== 'undefined'){                                                                  // 251\n\t\treturn SHIM_WORKER_PATH;                                                                                     // 252\n\t}else if('SHIM_WORKER_PATH' in catiline){                                                                     // 253\n\t\treturn catiline.SHIM_WORKER_PATH;                                                                            // 254\n\t}                                                                                                             // 255\n\tvar scripts = document.getElementsByTagName('script');                                                        // 256\n\tvar len = scripts.length;                                                                                     // 257\n\tvar i = 0;                                                                                                    // 258\n\twhile(i<len){                                                                                                 // 259\n\t\tif(/catiline(\\.min)?\\.js/.test(scripts[i].src)){                                                             // 260\n\t\t\treturn scripts[i].src;                                                                                      // 261\n\t\t}                                                                                                            // 262\n\t\ti++;                                                                                                         // 263\n\t}                                                                                                             // 264\n}                                                                                                              // 265\nfunction appendScript(iDoc,text){                                                                              // 266\n\tvar iScript = iDoc.createElement('script');                                                                   // 267\n\tif (typeof iScript.text !== 'undefined') {                                                                    // 268\n\t\tiScript.text = text;                                                                                         // 269\n\t} else {                                                                                                      // 270\n\t\tiScript.innerHTML = text;                                                                                    // 271\n\t}                                                                                                             // 272\n\tif(iDoc.readyState==='complete'){                                                                             // 273\n\t\tiDoc.documentElement.appendChild(iScript);                                                                   // 274\n\t}else{                                                                                                        // 275\n\t\tiDoc.onreadystatechange=function(){                                                                          // 276\n\t\t\tif(iDoc.readyState==='complete'){                                                                           // 277\n\t\t\t\tiDoc.documentElement.appendChild(iScript);                                                                 // 278\n\t\t\t}                                                                                                           // 279\n\t\t};                                                                                                           // 280\n\t}                                                                                                             // 281\n}                                                                                                              // 282\n//much of the iframe stuff inspired by https://github.com/padolsey/operative                                   // 283\n//most things besides the names have since been changed                                                        // 284\nfunction actualMakeI(script,codeword){                                                                         // 285\n\tvar iFrame = document.createElement('iframe');                                                                // 286\n\tiFrame.style.display = 'none';                                                                                // 287\n\tdocument.body.appendChild(iFrame);                                                                            // 288\n\tvar iDoc = iFrame.contentWindow.document;                                                                     // 289\n\tvar text=['try{ ',                                                                                            // 290\n\t'var __scripts__=\\'\\';function importScripts(scripts){',                                                      // 291\n\t'\tif(Array.isArray(scripts)&&scripts.length>0){',                                                             // 292\n\t'\t\tscripts.forEach(function(url){',                                                                           // 293\n\t'\t\t\tvar ajax = new XMLHttpRequest();',                                                                        // 294\n\t'\t\t\tajax.open(\\'GET\\',url,false);',                                                                           // 295\n\t'\t\t\tajax.send();__scripts__+=ajax.responseText;',                                                             // 296\n\t'\t\t\t__scripts__+=\\'\\\\n;\\';',                                                                                  // 297\n\t'\t\t});',                                                                                                      // 298\n\t'\t}',                                                                                                         // 299\n\t'};',                                                                                                         // 300\n\tscript,                                                                                                       // 301\n\t'}catch(e){',                                                                                                 // 302\n\t'\twindow.parent.postMessage([\\''+codeword+'\\',\\'error\\'],\\'*\\')',                                             // 303\n\t'}'].join('\\n');                                                                                              // 304\n\tappendScript(iDoc,text);                                                                                      // 305\n\treturn iFrame;                                                                                                // 306\n}                                                                                                              // 307\nfunction makeIframe(script,codeword){                                                                          // 308\n\tvar promise = catiline.deferred();                                                                            // 309\n\tif(document.readyState==='complete'){                                                                         // 310\n\t\tpromise.resolve(actualMakeI(script,codeword));                                                               // 311\n\t}else{                                                                                                        // 312\n\t\twindow.addEventListener('load',function(){                                                                   // 313\n\t\t\tpromise.resolve(actualMakeI(script,codeword));                                                              // 314\n\t\t},false);                                                                                                    // 315\n\t}                                                                                                             // 316\n\treturn promise.promise;                                                                                       // 317\n}                                                                                                              // 318\ncatiline.makeIWorker = function (strings,codeword){                                                            // 319\n\tvar script =moveImports(strings.join(''),'\\');eval(__scripts__);\\n');                                         // 320\n\tvar worker = {onmessage:function(){}};                                                                        // 321\n\tvar ipromise = makeIframe(script,codeword);                                                                   // 322\n\twindow.addEventListener('message',function(e){                                                                // 323\n\t\tif(e.data.slice && e.data.slice(0,codeword.length) === codeword){                                            // 324\n\t\t\tworker.onmessage({data:JSON.parse(e.data.slice(codeword.length))});                                         // 325\n\t\t}                                                                                                            // 326\n\t});                                                                                                           // 327\n\tworker.postMessage=function(data){                                                                            // 328\n\t\tipromise.then(function(iFrame){                                                                              // 329\n\t\t\tiFrame.contentWindow.postMessage(JSON.stringify(data),'*');                                                 // 330\n\t\t});                                                                                                          // 331\n\t};                                                                                                            // 332\n\tworker.terminate=function(){                                                                                  // 333\n\t\tipromise.then(function(iFrame){                                                                              // 334\n\t\t\tdocument.body.removeChild(iFrame);                                                                          // 335\n\t\t});                                                                                                          // 336\n\t};                                                                                                            // 337\n\treturn worker;                                                                                                // 338\n\t                                                                                                              // 339\n};                                                                                                             // 340\n                                                                                                               // 341\nfunction makeFallbackWorker(script){                                                                           // 342\n\tcatiline._noTransferable=true;                                                                                // 343\n\tvar worker = new Worker(getPath());                                                                           // 344\n\tworker.postMessage(script);                                                                                   // 345\n\treturn worker;                                                                                                // 346\n}                                                                                                              // 347\n//accepts an array of strings, joins them, and turns them into a worker.                                       // 348\ncatiline.makeWorker = function (strings, codeword){                                                            // 349\n\tif(!catiline._hasWorker){                                                                                     // 350\n\t\treturn catiline.makeIWorker(strings,codeword);                                                               // 351\n\t}                                                                                                             // 352\n\tvar worker;                                                                                                   // 353\n\tvar script = moveImports(strings.join('\\n'),'\\');\\n');                                                        // 354\n\tif(catiline._noTransferable){                                                                                 // 355\n\t\treturn makeFallbackWorker(script);                                                                           // 356\n\t}                                                                                                             // 357\n\ttry{                                                                                                          // 358\n\t\tworker= new Worker(catiline.URL.createObjectURL(new Blob([script],{type: 'text/javascript'})));              // 359\n\t}catch(e){                                                                                                    // 360\n\t\ttry{                                                                                                         // 361\n\t\t\tworker=makeFallbackWorker(script);                                                                          // 362\n\t\t}catch(ee){                                                                                                  // 363\n\t\t\tworker = catiline.makeIWorker(strings,codeword);                                                            // 364\n\t\t}                                                                                                            // 365\n\t}finally{                                                                                                     // 366\n\t\treturn worker;                                                                                               // 367\n\t}                                                                                                             // 368\n};                                                                                                             // 369\n                                                                                                               // 370\ncatiline.makeUrl = function (fileName) {                                                                       // 371\n\tvar link = document.createElement('link');                                                                    // 372\n\tlink.href = fileName;                                                                                         // 373\n\treturn link.href;                                                                                             // 374\n};                                                                                                             // 375\n                                                                                                               // 376\nfunction stringifyObject(obj){                                                                                 // 377\n\tvar out = '{';                                                                                                // 378\n\tvar first = true;                                                                                             // 379\n\tfor(var key in obj){                                                                                          // 380\n\t\tif(first){                                                                                                   // 381\n\t\t\tfirst = false;                                                                                              // 382\n\t\t}else{                                                                                                       // 383\n\t\t\tout+=',';                                                                                                   // 384\n\t\t}                                                                                                            // 385\n\t\tout += key;                                                                                                  // 386\n\t\tout += ':';                                                                                                  // 387\n\t\tout += catiline.stringify(obj[key]);                                                                         // 388\n\t}                                                                                                             // 389\n\tout += '}';                                                                                                   // 390\n\treturn out;                                                                                                   // 391\n}                                                                                                              // 392\nfunction stringifyArray(array){                                                                                // 393\n\tif(array.length){                                                                                             // 394\n\t\tvar out = '[';                                                                                               // 395\n\t\tout += catiline.stringify(array[0]);                                                                         // 396\n\t\tvar i = 0;                                                                                                   // 397\n\t\tvar len = array.length;                                                                                      // 398\n\t\twhile(++i<len){                                                                                              // 399\n\t\t\tout += ',';                                                                                                 // 400\n\t\t\tout += catiline.stringify(array[i]);                                                                        // 401\n\t\t}                                                                                                            // 402\n\t\tout += ']';                                                                                                  // 403\n\t\treturn out;                                                                                                  // 404\n\t}else{                                                                                                        // 405\n\t\treturn '[]';                                                                                                 // 406\n\t}                                                                                                             // 407\n}                                                                                                              // 408\ncatiline.stringify = function(thing){                                                                          // 409\n\tif(Array.isArray(thing)){                                                                                     // 410\n\t\treturn stringifyArray(thing);                                                                                // 411\n\t}else if(typeof thing === 'function'||typeof thing === 'number'||typeof thing === 'boolean'){                 // 412\n\t\treturn thing.toString();                                                                                     // 413\n\t}else if(typeof thing === 'string'){                                                                          // 414\n\t\treturn '\"' + thing + '\"';                                                                                    // 415\n\t}else if(thing.toString() === '[object Object]'){                                                             // 416\n\t\treturn stringifyObject(thing);                                                                               // 417\n\t}                                                                                                             // 418\n};                                                                                                             // 419\n                                                                                                               // 420\nvar workerSetup = function(context) {                                                                          // 421\n\tself.__iFrame__ = typeof document !== 'undefined';                                                            // 422\n\tself.__self__ = {                                                                                             // 423\n\t\tonmessage: function(e) {                                                                                     // 424\n\t\t\tcontext.trigger('messege', e.data[1]);                                                                      // 425\n\t\t\tif (e.data[0][0] === context.__codeWord__) {                                                                // 426\n\t\t\t\treturn regMsg(e);                                                                                          // 427\n\t\t\t}                                                                                                           // 428\n\t\t\telse {                                                                                                      // 429\n\t\t\t\tcontext.trigger(e.data[0][0], e.data[1]);                                                                  // 430\n\t\t\t}                                                                                                           // 431\n\t\t}                                                                                                            // 432\n\t};                                                                                                            // 433\n\tif (__iFrame__) {                                                                                             // 434\n\t\twindow.onmessage = function(e) {                                                                             // 435\n\t\t\tif (typeof e.data === 'string') {                                                                           // 436\n\t\t\t\te = {                                                                                                      // 437\n\t\t\t\t\tdata: JSON.parse(e.data)                                                                                  // 438\n\t\t\t\t};                                                                                                         // 439\n\t\t\t}                                                                                                           // 440\n\t\t\t__self__.onmessage(e);                                                                                      // 441\n\t\t};                                                                                                           // 442\n\t}                                                                                                             // 443\n\telse {                                                                                                        // 444\n\t\tself.onmessage = __self__.onmessage;                                                                         // 445\n\t}                                                                                                             // 446\n\t__self__.postMessage = function(rawData, transfer) {                                                          // 447\n\t\tif (!self._noTransferable && !__iFrame__) {                                                                  // 448\n\t\t\tself.postMessage(rawData, transfer);                                                                        // 449\n\t\t}                                                                                                            // 450\n\t\telse if (__iFrame__) {                                                                                       // 451\n\t\t\tvar data = context.__codeWord__ + JSON.stringify(rawData);                                                  // 452\n\t\t\twindow.parent.postMessage(data, '*');                                                                       // 453\n\t\t}                                                                                                            // 454\n\t\telse if (self._noTransferable) {                                                                             // 455\n\t\t\tself.postMessage(rawData);                                                                                  // 456\n\t\t}                                                                                                            // 457\n\t};                                                                                                            // 458\n\tself.console = {};                                                                                            // 459\n\tvar regMsg = function(e) {                                                                                    // 460\n\t\tvar cb = function(data, transfer) {                                                                          // 461\n\t\t\t__self__.postMessage([e.data[0], data], transfer);                                                          // 462\n\t\t};                                                                                                           // 463\n\t\tvar result;                                                                                                  // 464\n\t\tif (__iFrame__) {                                                                                            // 465\n\t\t\ttry {                                                                                                       // 466\n\t\t\t\tresult = context[e.data[1]](e.data[2], cb, context);                                                       // 467\n\t\t\t}                                                                                                           // 468\n\t\t\tcatch (ee) {                                                                                                // 469\n\t\t\t\tcontext.fire('error', JSON.stringify(ee));                                                                 // 470\n\t\t\t}                                                                                                           // 471\n\t\t}                                                                                                            // 472\n\t\telse {                                                                                                       // 473\n\t\t\tresult = context[e.data[1]](e.data[2], cb, context);                                                        // 474\n\t\t}                                                                                                            // 475\n\t\tif (typeof result !== 'undefined') {                                                                         // 476\n\t\t\tcb(result);                                                                                                 // 477\n\t\t}                                                                                                            // 478\n\t};                                                                                                            // 479\n};                                                                                                             // 480\nfunction addEvents(context, msg) {                                                                             // 481\n\tvar listeners = {};                                                                                           // 482\n\tvar sendMessage;                                                                                              // 483\n\tif(typeof __self__ !== 'undefined'){                                                                          // 484\n\t\tsendMessage = __self__.postMessage;                                                                          // 485\n\t}else if (msg) {                                                                                              // 486\n\t\tsendMessage = msg;                                                                                           // 487\n\t}                                                                                                             // 488\n\tcontext.on = function(eventName, func, scope) {                                                               // 489\n\t\tscope = scope || context;                                                                                    // 490\n\t\tif (eventName.indexOf(' ') > 0) {                                                                            // 491\n\t\t\teventName.split(' ').map(function(v) {                                                                      // 492\n\t\t\t\treturn context.on(v, func, scope);                                                                         // 493\n\t\t\t}, this);                                                                                                   // 494\n\t\t\treturn context;                                                                                             // 495\n\t\t}                                                                                                            // 496\n\t\tif (!(eventName in listeners)) {                                                                             // 497\n\t\t\tlisteners[eventName] = [];                                                                                  // 498\n\t\t}                                                                                                            // 499\n\t\tvar newFunc = function(a) {                                                                                  // 500\n\t\t\tfunc.call(scope, a, scope);                                                                                 // 501\n\t\t};                                                                                                           // 502\n\t\tnewFunc.orig = func;                                                                                         // 503\n\t\tlisteners[eventName].push(newFunc);                                                                          // 504\n\t\treturn context;                                                                                              // 505\n\t};                                                                                                            // 506\n\tcontext.one = function(eventName, func, scope) {                                                              // 507\n\t\tscope = scope || context;                                                                                    // 508\n                                                                                                               // 509\n\t\tfunction ourFunc(a) {                                                                                        // 510\n\t\t\tcontext.off(eventName, ourFunc);                                                                            // 511\n\t\t\tfunc.call(scope, a, scope);                                                                                 // 512\n\t\t}                                                                                                            // 513\n\t\treturn context.on(eventName, ourFunc);                                                                       // 514\n\t};                                                                                                            // 515\n                                                                                                               // 516\n\tcontext.trigger = function(eventName, data) {                                                                 // 517\n\t\tif (eventName.indexOf(' ') > 0) {                                                                            // 518\n\t\t\teventName.split(' ').forEach(function(v) {                                                                  // 519\n\t\t\t\tcontext.trigger(v, data);                                                                                  // 520\n\t\t\t});                                                                                                         // 521\n\t\t\treturn context;                                                                                             // 522\n\t\t}                                                                                                            // 523\n\t\tif (!(eventName in listeners)) {                                                                             // 524\n\t\t\treturn context;                                                                                             // 525\n\t\t}                                                                                                            // 526\n\t\tlisteners[eventName].forEach(function(v) {                                                                   // 527\n\t\t\tv(data);                                                                                                    // 528\n\t\t});                                                                                                          // 529\n\t\treturn context;                                                                                              // 530\n\t};                                                                                                            // 531\n\tcontext.fire = function(eventName, data, transfer) {                                                          // 532\n\t\tsendMessage([[eventName],data],transfer);                                                                    // 533\n\t\treturn context;                                                                                              // 534\n\t};                                                                                                            // 535\n\tcontext.off = function(eventName, func) {                                                                     // 536\n\t\tif (eventName.indexOf(' ') > 0) {                                                                            // 537\n\t\t\teventName.split(' ').map(function(v) {                                                                      // 538\n\t\t\t\treturn context.off(v, func);                                                                               // 539\n\t\t\t});                                                                                                         // 540\n\t\t\treturn context;                                                                                             // 541\n\t\t}                                                                                                            // 542\n\t\tif (!(eventName in listeners)) {                                                                             // 543\n\t\t\treturn context;                                                                                             // 544\n\t\t}                                                                                                            // 545\n\t\telse {                                                                                                       // 546\n\t\t\tif (func) {                                                                                                 // 547\n\t\t\t\tlisteners[eventName] = listeners[eventName].map(function(a) {                                              // 548\n\t\t\t\t\tif (a.orig === func) {                                                                                    // 549\n\t\t\t\t\t\treturn false;                                                                                            // 550\n\t\t\t\t\t}                                                                                                         // 551\n\t\t\t\t\telse {                                                                                                    // 552\n\t\t\t\t\t\treturn a;                                                                                                // 553\n\t\t\t\t\t}                                                                                                         // 554\n\t\t\t\t}).filter(function(a) {                                                                                    // 555\n\t\t\t\t\treturn a;                                                                                                 // 556\n\t\t\t\t});                                                                                                        // 557\n\t\t\t}                                                                                                           // 558\n\t\t\telse {                                                                                                      // 559\n\t\t\t\tdelete listeners[eventName];                                                                               // 560\n\t\t\t}                                                                                                           // 561\n\t\t}                                                                                                            // 562\n\t\treturn context;                                                                                              // 563\n\t};                                                                                                            // 564\n}                                                                                                              // 565\nfunction makeConsole(msg) {                                                                                    // 566\n\tif (typeof console !== 'undefined') {                                                                         // 567\n\t\tvar method = console[msg[0]] ? msg[0] : 'log';                                                               // 568\n\t\tif (typeof console[method].apply === 'undefined') {                                                          // 569\n\t\t\tconsole[method](msg[1].join(' '));                                                                          // 570\n\t\t}                                                                                                            // 571\n\t\telse {                                                                                                       // 572\n\t\t\tconsole[method].apply(console, msg[1]);                                                                     // 573\n\t\t}                                                                                                            // 574\n\t}                                                                                                             // 575\n}                                                                                                              // 576\nfunction makeWorkerConsole(context){                                                                           // 577\n\tfunction makeConsole(method) {                                                                                // 578\n\t\treturn function() {                                                                                          // 579\n\t\t\tvar len = arguments.length;                                                                                 // 580\n\t\t\tvar out = [];                                                                                               // 581\n\t\t\tvar i = 0;                                                                                                  // 582\n\t\t\twhile (i < len) {                                                                                           // 583\n\t\t\t\tout.push(arguments[i]);                                                                                    // 584\n\t\t\t\ti++;                                                                                                       // 585\n\t\t\t}                                                                                                           // 586\n\t\t\tcontext.fire('console', [method, out]);                                                                     // 587\n\t\t};                                                                                                           // 588\n\t}                                                                                                             // 589\n\t['log', 'debug', 'error', 'info', 'warn', 'time', 'timeEnd'].forEach(function(v) {                            // 590\n\t\tconsole[v] = makeConsole(v);                                                                                 // 591\n\t});                                                                                                           // 592\n}                                                                                                              // 593\nfunction Catiline(obj) {                                                                                       // 594\n\tif (typeof obj === 'function') {                                                                              // 595\n\t\tobj = {                                                                                                      // 596\n\t\t\tdata: obj                                                                                                   // 597\n\t\t};                                                                                                           // 598\n\t}                                                                                                             // 599\n\tvar codeWord = 'com.catilinejs.' + (Catiline._hasWorker ? 'iframe' : 'worker') + Math.random();               // 600\n\tvar self = this;                                                                                              // 601\n\tvar promises = [];                                                                                            // 602\n\taddEvents(self, function(data, transfer) {                                                                    // 603\n\t\tif (catiline._noTransferable) {                                                                              // 604\n\t\t\tworker.postMessage(data);                                                                                   // 605\n\t\t}                                                                                                            // 606\n\t\telse {                                                                                                       // 607\n\t\t\tworker.postMessage(data, transfer);                                                                         // 608\n\t\t}                                                                                                            // 609\n\t});                                                                                                           // 610\n\tvar rejectPromises = function(msg) {                                                                          // 611\n\t\tif (typeof msg !== 'string' && 'preventDefault' in msg) {                                                    // 612\n\t\t\tmsg.preventDefault();                                                                                       // 613\n\t\t\tmsg = msg.message;                                                                                          // 614\n\t\t}                                                                                                            // 615\n\t\tpromises.forEach(function(p) {                                                                               // 616\n\t\t\tif (p) {                                                                                                    // 617\n\t\t\t\tp.reject(msg);                                                                                             // 618\n\t\t\t}                                                                                                           // 619\n\t\t});                                                                                                          // 620\n\t};                                                                                                            // 621\n\tobj.__codeWord__ = codeWord;                                                                                  // 622\n\tobj.__initialize__ = [workerSetup, addEvents, makeWorkerConsole];                                             // 623\n\tif (!('initialize' in obj)) {                                                                                 // 624\n\t\tif ('init' in obj) {                                                                                         // 625\n\t\t\tobj.__initialize__.push(obj.init);                                                                          // 626\n\t\t}                                                                                                            // 627\n\t}                                                                                                             // 628\n\telse {                                                                                                        // 629\n\t\tobj.__initialize__.push(obj.initialize);                                                                     // 630\n\t}                                                                                                             // 631\n                                                                                                               // 632\n\tif (!('events' in obj)) {                                                                                     // 633\n\t\tobj.events = {};                                                                                             // 634\n\t}                                                                                                             // 635\n\tif ('listners' in obj && typeof obj.listners !== 'function') {                                                // 636\n\t\tfor (var key in obj.listners) {                                                                              // 637\n\t\t\tself.on(key, obj.listners[key]);                                                                            // 638\n\t\t}                                                                                                            // 639\n\t}                                                                                                             // 640\n\tvar fObj = 'var _db = {\\n\\t';                                                                                 // 641\n\tvar keyFunc = function(key) {                                                                                 // 642\n\t\tvar out = function(data, transfer) {                                                                         // 643\n\t\t\tvar i = promises.length;                                                                                    // 644\n\t\t\tpromises[i] = catiline.deferred();                                                                          // 645\n\t\t\tif (catiline._noTransferable) {                                                                             // 646\n\t\t\t\tworker.postMessage([                                                                                       // 647\n\t\t\t\t\t[codeWord, i], key, data]);                                                                               // 648\n\t\t\t}                                                                                                           // 649\n\t\t\telse {                                                                                                      // 650\n\t\t\t\tworker.postMessage([                                                                                       // 651\n\t\t\t\t\t[codeWord, i], key, data], transfer);                                                                     // 652\n\t\t\t}                                                                                                           // 653\n\t\t\treturn promises[i].promise;                                                                                 // 654\n\t\t};                                                                                                           // 655\n\t\treturn out;                                                                                                  // 656\n\t};                                                                                                            // 657\n\tvar i = false;                                                                                                // 658\n\tfor (var key$0 in obj) {                                                                                      // 659\n\t\tif(['listners','initialize','init'].indexOf(key$0)>-1){                                                      // 660\n\t\t\tcontinue;                                                                                                   // 661\n\t\t}                                                                                                            // 662\n\t\tif (i) {                                                                                                     // 663\n\t\t\tfObj += ',\\n\\t';                                                                                            // 664\n\t\t}                                                                                                            // 665\n\t\telse {                                                                                                       // 666\n\t\t\ti = true;                                                                                                   // 667\n\t\t}                                                                                                            // 668\n\t\tif (typeof obj[key$0] === 'function') {                                                                      // 669\n\t\t\tfObj = fObj + key$0 + ':' + obj[key$0].toString();                                                          // 670\n\t\t\tself[key$0] = keyFunc(key$0);                                                                               // 671\n\t\t}                                                                                                            // 672\n\t\telse {                                                                                                       // 673\n\t\t\tvar outThing = catiline.stringify(obj[key$0]);                                                              // 674\n\t\t\tif (typeof outThing !== 'undefined') {                                                                      // 675\n\t\t\t\tfObj = fObj + key$0 + ':' + outThing;                                                                      // 676\n\t\t\t}                                                                                                           // 677\n\t\t}                                                                                                            // 678\n\t}                                                                                                             // 679\n\tfObj = fObj + '};';                                                                                           // 680\n\tvar worker = catiline.makeWorker(['\\'use strict\\';', '',                                                      // 681\n\tfObj, '_db.__initialize__.forEach(function(f){', '\tf.call(_db,_db);', '});', 'for(var key in _db.events){', '\t_db.on(key,_db.events[key]);', '}'], codeWord);\n\tworker.onmessage = function(e) {                                                                              // 683\n\t\tself.trigger('message', e.data[1]);                                                                          // 684\n\t\tif (e.data[0][0] === codeWord) {                                                                             // 685\n\t\t\tpromises[e.data[0][1]].resolve(e.data[1]);                                                                  // 686\n\t\t\tpromises[e.data[0][1]] = 0;                                                                                 // 687\n\t\t}                                                                                                            // 688\n\t\telse {                                                                                                       // 689\n\t\t\tself.trigger(e.data[0][0], e.data[1]);                                                                      // 690\n\t\t}                                                                                                            // 691\n\t};                                                                                                            // 692\n\tself.on('error', rejectPromises);                                                                             // 693\n\tworker.onerror = function(e) {                                                                                // 694\n\t\tself.trigger('error', e);                                                                                    // 695\n\t};                                                                                                            // 696\n\tself.on('console', makeConsole);                                                                              // 697\n\tself._close = function() {                                                                                    // 698\n\t\tworker.terminate();                                                                                          // 699\n\t\trejectPromises('closed');                                                                                    // 700\n\t\treturn catiline.resolve();                                                                                   // 701\n\t};                                                                                                            // 702\n\tif (!('close' in self)) {                                                                                     // 703\n\t\tself.close = self._close;                                                                                    // 704\n\t}                                                                                                             // 705\n}                                                                                                              // 706\ncatiline.Worker = Catiline;                                                                                    // 707\n                                                                                                               // 708\ncatiline.worker = function(obj){                                                                               // 709\n    return new Catiline(obj);                                                                                  // 710\n};                                                                                                             // 711\nfunction makeActualKeyFuncs(resolvePromises, self) {                                                           // 712\n\treturn {                                                                                                      // 713\n\t\tkeyFunc: function(k) {                                                                                       // 714\n\t\t\treturn function(data, transfer) {                                                                           // 715\n\t\t\t\treturn resolvePromises(k, data, transfer);                                                                 // 716\n\t\t\t};                                                                                                          // 717\n\t\t},                                                                                                           // 718\n\t\tkeyFuncBatch: function(k) {                                                                                  // 719\n\t\t\treturn function(array) {                                                                                    // 720\n\t\t\t\treturn catiline.all(array.map(function(data) {                                                             // 721\n\t\t\t\t\treturn resolvePromises(k, data);                                                                          // 722\n\t\t\t\t}));                                                                                                       // 723\n\t\t\t};                                                                                                          // 724\n\t\t},                                                                                                           // 725\n\t\tkeyFuncBatchCB: function(k) {                                                                                // 726\n\t\t\treturn function(array) {                                                                                    // 727\n\t\t\t\treturn catiline.all(array.map(function(data) {                                                             // 728\n\t\t\t\t\treturn resolvePromises(k, data).then(self.__cb__);                                                        // 729\n\t\t\t\t}));                                                                                                       // 730\n\t\t\t};                                                                                                          // 731\n\t\t},                                                                                                           // 732\n\t\tkeyFuncBatchTransfer: function(k) {                                                                          // 733\n\t\t\treturn function(array) {                                                                                    // 734\n\t\t\t\treturn catiline.all(array.map(function(data) {                                                             // 735\n\t\t\t\t\treturn resolvePromises(k, data[0], data[1]);                                                              // 736\n\t\t\t\t}));                                                                                                       // 737\n\t\t\t};                                                                                                          // 738\n\t\t},                                                                                                           // 739\n\t\tkeyFuncBatchTransferCB: function(k) {                                                                        // 740\n\t\t\treturn function(array) {                                                                                    // 741\n\t\t\t\treturn catiline.all(array.map(function(data) {                                                             // 742\n\t\t\t\t\treturn resolvePromises(k, data[0], data[1]).then(self.__cb__);                                            // 743\n\t\t\t\t}));                                                                                                       // 744\n\t\t\t};                                                                                                          // 745\n\t\t}                                                                                                            // 746\n\t};                                                                                                            // 747\n}                                                                                                              // 748\nfunction makeKeyFuncs(resolvePromises, self, obj){                                                             // 749\n\tvar funcs = makeActualKeyFuncs(resolvePromises, self);                                                        // 750\n\tfor (var key in obj) {                                                                                        // 751\n\t\tself[key] = funcs.keyFunc(key);                                                                              // 752\n\t\tself.batch[key] = funcs.keyFuncBatch(key);                                                                   // 753\n\t\tself.__batchcb__[key] = funcs.keyFuncBatchCB(key);                                                           // 754\n\t\tself.batchTransfer[key] = funcs.keyFuncBatchTransfer(key);                                                   // 755\n\t\tself.__batchtcb__[key] = funcs.keyFuncBatchTransferCB(key);                                                  // 756\n\t}                                                                                                             // 757\n}                                                                                                              // 758\nfunction addBatchEvents(self, workers, n){                                                                     // 759\n\tself.on = function (eventName, func, context) {                                                               // 760\n\t\tworkers.forEach(function (worker) {                                                                          // 761\n\t\t\tworker.on(eventName, func, context);                                                                        // 762\n\t\t});                                                                                                          // 763\n\t\treturn self;                                                                                                 // 764\n\t};                                                                                                            // 765\n\tself.off = function (eventName, func, context) {                                                              // 766\n\t\tworkers.forEach(function (worker) {                                                                          // 767\n\t\t\tworker.off(eventName, func, context);                                                                       // 768\n\t\t});                                                                                                          // 769\n\t\treturn self;                                                                                                 // 770\n\t};                                                                                                            // 771\n\tself.fire = function (eventName, data) {                                                                      // 772\n\t\tworkers[~~ (Math.random() * n)].fire(eventName, data);                                                       // 773\n\t\treturn self;                                                                                                 // 774\n\t};                                                                                                            // 775\n}                                                                                                              // 776\nfunction makeUnmanaged(workers, n){                                                                            // 777\n\treturn function(key, data, transfer, promise){                                                                // 778\n\t\tpromise.promise.cancel = function(reason){                                                                   // 779\n\t\t\treturn promise.reject(reason);                                                                              // 780\n\t\t};                                                                                                           // 781\n\t\tworkers[~~ (Math.random() * n)][key](data, transfer).then(function(v){                                       // 782\n\t\t\treturn promise.resolve(v);                                                                                  // 783\n\t\t},function(v){                                                                                               // 784\n\t\t\treturn promise.reject(v);                                                                                   // 785\n\t\t});                                                                                                          // 786\n\t\treturn promise.promise;                                                                                      // 787\n\t};                                                                                                            // 788\n}                                                                                                              // 789\nfunction makeQueueWorkers(n,idle,obj){                                                                         // 790\n\tvar workers = [];                                                                                             // 791\n\tvar numIdle = -1;                                                                                             // 792\n\twhile (++numIdle < n) {                                                                                       // 793\n\t\tworkers[numIdle] = new catiline.Worker(obj);                                                                 // 794\n\t\tidle.push(numIdle);                                                                                          // 795\n\t}                                                                                                             // 796\n\treturn workers;                                                                                               // 797\n}                                                                                                              // 798\nfunction CatilineQueue(obj, n, dumb) {                                                                         // 799\n\tvar self = this;                                                                                              // 800\n\tvar numIdle = n;                                                                                              // 801\n\tvar idle = [];                                                                                                // 802\n\tvar que = [];                                                                                                 // 803\n\tvar queueLen = 0;                                                                                             // 804\n\tvar workers = makeQueueWorkers(n,idle,obj);                                                                   // 805\n\taddBatchEvents(self, workers, n);                                                                             // 806\n\tvar batchFire = function (eventName, data) {                                                                  // 807\n\t\tworkers.forEach(function (worker) {                                                                          // 808\n\t\t\tworker.fire(eventName, data);                                                                               // 809\n\t\t});                                                                                                          // 810\n\t\treturn self;                                                                                                 // 811\n\t};                                                                                                            // 812\n\t                                                                                                              // 813\n\tself.batch.fire = batchFire;                                                                                  // 814\n\tself.batchTransfer.fire = batchFire;                                                                          // 815\n                                                                                                               // 816\n\tfunction clearQueue(mgs) {                                                                                    // 817\n\t\tmgs = mgs || 'canceled';                                                                                     // 818\n\t\tqueueLen = 0;                                                                                                // 819\n\t\tvar oQ = que;                                                                                                // 820\n\t\tque = [];                                                                                                    // 821\n\t\toQ.forEach(function (p) {                                                                                    // 822\n\t\t\tp[3].reject(mgs);                                                                                           // 823\n\t\t});                                                                                                          // 824\n\t\treturn self;                                                                                                 // 825\n\t}                                                                                                             // 826\n\tself.clearQueue = clearQueue;                                                                                 // 827\n\tmakeKeyFuncs(resolvePromises, self, obj);                                                                     // 828\n\t                                                                                                              // 829\n                                                                                                               // 830\n\tfunction done(num) {                                                                                          // 831\n\t\tif (queueLen) {                                                                                              // 832\n\t\t\tvar data = que.shift();                                                                                     // 833\n\t\t\tqueueLen--;                                                                                                 // 834\n\t\t\tworkers[num][data[0]](data[1], data[2]).then(function (d) {                                                 // 835\n\t\t\t\tdone(num);                                                                                                 // 836\n\t\t\t\tdata[3].resolve(d);                                                                                        // 837\n\t\t\t}, function (d) {                                                                                           // 838\n\t\t\t\tdone(num);                                                                                                 // 839\n\t\t\t\tdata[3].reject(d);                                                                                         // 840\n\t\t\t});                                                                                                         // 841\n\t\t}                                                                                                            // 842\n\t\telse {                                                                                                       // 843\n\t\t\tnumIdle++;                                                                                                  // 844\n\t\t\tidle.push(num);                                                                                             // 845\n\t\t}                                                                                                            // 846\n\t}                                                                                                             // 847\n\tvar resolveUnmanagedPromises;                                                                                 // 848\n\tif(dumb){                                                                                                     // 849\n\t\tresolveUnmanagedPromises = makeUnmanaged(workers, n);                                                        // 850\n\t}                                                                                                             // 851\n\tfunction resolvePromises(key, data, transfer) { //srsly better name!                                          // 852\n\t\tvar promise = catiline.deferred();                                                                           // 853\n\t\tif (dumb) {                                                                                                  // 854\n\t\t\treturn resolveUnmanagedPromises(key, data, transfer,promise);                                               // 855\n\t\t}                                                                                                            // 856\n\t\tif (!queueLen && numIdle) {                                                                                  // 857\n\t\t\tvar num = idle.pop();                                                                                       // 858\n\t\t\tnumIdle--;                                                                                                  // 859\n\t\t\tpromise.promise.cancel = function(reason){                                                                  // 860\n\t\t\t\treturn promise.reject(reason);                                                                             // 861\n\t\t\t};                                                                                                          // 862\n\t\t\tworkers[num][key](data, transfer).then(function (d) {                                                       // 863\n\t\t\t\tdone(num);                                                                                                 // 864\n\t\t\t\tpromise.resolve(d);                                                                                        // 865\n\t\t\t}, function (d) {                                                                                           // 866\n\t\t\t\tdone(num);                                                                                                 // 867\n\t\t\t\tpromise.reject(d);                                                                                         // 868\n\t\t\t});                                                                                                         // 869\n\t\t} else if (queueLen || !numIdle) {                                                                           // 870\n\t\t\tvar queueItem = [key, data, transfer, promise];                                                             // 871\n\t\t\tpromise.promise.cancel = function(reason){                                                                  // 872\n\t\t\t\tvar loc = que.indexOf(queueItem);                                                                          // 873\n\t\t\t\tif(loc>-1){                                                                                                // 874\n\t\t\t\t\tque.splice(loc,1);                                                                                        // 875\n\t\t\t\t\tqueueLen--;                                                                                               // 876\n\t\t\t\t}                                                                                                          // 877\n\t\t\t\treturn promise.reject(reason);                                                                             // 878\n\t\t\t};                                                                                                          // 879\n\t\t\tqueueLen = que.push(queueItem);                                                                             // 880\n\t\t}                                                                                                            // 881\n\t\treturn promise.promise;                                                                                      // 882\n\t}                                                                                                             // 883\n\tself._close = function () {                                                                                   // 884\n\t\treturn catiline.all(workers.map(function (w) {                                                               // 885\n\t\t\treturn w._close();                                                                                          // 886\n\t\t}));                                                                                                         // 887\n\t};                                                                                                            // 888\n\tif (!('close' in self)) {                                                                                     // 889\n\t\tself.close = self._close;                                                                                    // 890\n\t}                                                                                                             // 891\n}                                                                                                              // 892\nCatilineQueue.prototype.__batchcb__ = {};                                                                      // 893\nCatilineQueue.prototype.__batchtcb__ = {};                                                                     // 894\nCatilineQueue.prototype.batch = function (cb) {                                                                // 895\n\tif (typeof cb === 'function') {                                                                               // 896\n\t\tthis.__cb__ = cb;                                                                                            // 897\n\t\treturn this.__batchcb__;                                                                                     // 898\n\t}                                                                                                             // 899\n\telse {                                                                                                        // 900\n\t\treturn this.clearQueue(cb);                                                                                  // 901\n\t}                                                                                                             // 902\n};                                                                                                             // 903\nCatilineQueue.prototype.batchTransfer = function (cb) {                                                        // 904\n\tif (typeof cb === 'function') {                                                                               // 905\n\t\tthis.__batchtcb__.__cb__ = cb;                                                                               // 906\n\t\treturn this.__batchtcb__;                                                                                    // 907\n\t}                                                                                                             // 908\n\telse {                                                                                                        // 909\n\t\treturn this.clearQueue(cb);                                                                                  // 910\n\t}                                                                                                             // 911\n};                                                                                                             // 912\ncatiline.Queue = CatilineQueue;                                                                                // 913\ncatiline.queue = function (obj, n, dumb) {                                                                     // 914\n\treturn new catiline.Queue(obj, n, dumb);                                                                      // 915\n};                                                                                                             // 916\n                                                                                                               // 917\nfunction catiline(object,queueLength,unmanaged){                                                               // 918\n\tif(arguments.length === 1 || !queueLength || queueLength <= 1){                                               // 919\n\t\treturn new catiline.Worker(object);                                                                          // 920\n\t}else{                                                                                                        // 921\n\t\treturn new catiline.Queue(object,queueLength,unmanaged);                                                     // 922\n\t}                                                                                                             // 923\n}                                                                                                              // 924\n//will be removed in v3                                                                                        // 925\ncatiline.setImmediate = catiline.nextTick;                                                                     // 926\nfunction initBrowser(catiline){                                                                                // 927\n\tvar origCW = global.cw;                                                                                       // 928\n\tcatiline.noConflict=function(newName){                                                                        // 929\n\t\tglobal.cw = origCW;                                                                                          // 930\n\t\tif(newName){                                                                                                 // 931\n\t\t\tglobal[newName]=catiline;                                                                                   // 932\n\t\t}                                                                                                            // 933\n\t};                                                                                                            // 934\n\tglobal.catiline = catiline;                                                                                   // 935\n\tglobal.cw = catiline;                                                                                         // 936\n\tif(!('communist' in global)){                                                                                 // 937\n\t\tglobal.communist=catiline;                                                                                   // 938\n\t}                                                                                                             // 939\n                                                                                                               // 940\n}                                                                                                              // 941\n                                                                                                               // 942\nif(typeof define === 'function'){                                                                              // 943\n\tdefine(function(require){                                                                                     // 944\n\t\tcatiline.SHIM_WORKER_PATH=require.toUrl('./catiline.js');                                                    // 945\n\t\treturn catiline;                                                                                             // 946\n\t});                                                                                                           // 947\n}else if(typeof module === 'undefined' || !('exports' in module)){                                             // 948\n\tinitBrowser(catiline);                                                                                        // 949\n} else {                                                                                                       // 950\n\tmodule.exports=catiline;                                                                                      // 951\n}catiline.version = '2.9.3';                                                                                   // 952\n})(this);}                                                                                                     // 953\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}